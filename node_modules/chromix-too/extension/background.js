// Generated by CoffeeScript 1.9.3
(function() {
  var handleRequest, reTryConnect, tryConnect,
    slice = [].slice;

  handleRequest = function(sock) {
    return function(arg) {
      var data, i, len, obj, path, property, ref, request;
      data = arg.data;
      request = JSON.parse(data);
      if (request.args == null) {
        request.args = [];
      }
      path = request.path;
      if (path == null) {
        return sock.send(JSON.stringify(extend(request, {
          error: "requests does not contain a path"
        })));
      } else if (path === "ping") {
        return sock.send(JSON.stringify(extend(request, {
          response: ["ok"],
          error: false
        })));
      } else {
        obj = window;
        ref = path.split(".");
        for (i = 0, len = ref.length; i < len; i++) {
          property = ref[i];
          try {
            obj = obj[property];
          } catch (_error) {
            sock.send(JSON.stringify(extend(request, {
              error: "incorrect path: " + path
            })));
            return;
          }
        }
        switch (typeof obj) {
          case "function":
            return obj.apply(null, slice.call(request.args).concat([function() {
              var response;
              response = 1 <= arguments.length ? slice.call(arguments, 0) : [];
              return sock.send(JSON.stringify(extend(request, {
                response: response,
                error: false
              })));
            }]));
          default:
            return sock.send(JSON.stringify(extend(request, {
              response: [obj],
              error: false
            })));
        }
      }
    };
  };

  reTryConnect = function() {
    console.log("disconnected, retry connection in " + config.timeout + "ms...");
    return setTimeout(tryConnect, config.timeout);
  };

  tryConnect = function() {
    var reTryFunction, sock, url;
    reTryFunction = makeIdempotent(reTryConnect);
    try {
      url = "ws://" + config.host + ":" + config.port + "/";
      sock = new WebSocket(url);
    } catch (_error) {
      reTryFunction();
    }
    sock.onerror = sock.onclose = reTryFunction;
    sock.onmessage = handleRequest(sock);
    return console.log("connected: " + url);
  };

  tryConnect();

}).call(this);
