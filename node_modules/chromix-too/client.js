#!/usr/bin/env node
;
var arg, args, chromix, commandArgs, commandName, filterTabs, fn, fn1, focusWindow, getMatchingTabs, getQueryFlags, i, j, len, len1, optimist, ref, ref1, url, utils,
  slice = [].slice;

utils = require("./utils");

utils.extend(global, utils);

optimist = require("optimist");

args = optimist.usage("Usage: $0 [--sock=PATH]").alias("h", "help")["default"]("sock", config.sock).argv;

if (args.help) {
  optimist.showHelp();
  process.exit(0);
}

chromix = require("./chromix-too")(args.sock).chromix;

ref = 2 < process.argv.length ? [process.argv[2], process.argv.slice(3)] : ["ping", []], commandName = ref[0], commandArgs = ref[1];

getQueryFlags = function(commandArgs) {
  var arg, flag, i, len, queryFlags, ref1, validQueryFlags;
  validQueryFlags = {};
  ref1 = "active pinned audible muted highlighted discarded autoDiscardable currentWindow lastFocusedWindow".split(" ");
  for (i = 0, len = ref1.length; i < len; i++) {
    flag = ref1[i];
    validQueryFlags[flag] = true;
  }
  queryFlags = {};
  commandArgs = (function() {
    var j, len1, ref2, ref3, results;
    results = [];
    for (j = 0, len1 = commandArgs.length; j < len1; j++) {
      arg = commandArgs[j];
      if (arg in validQueryFlags) {
        queryFlags[arg] = true;
        continue;
      } else if (((ref2 = arg[0]) === "-" || ref2 === "!") && arg.slice(1) in validQueryFlags) {
        queryFlags[arg.slice(1)] = false;
        continue;
      } else if (((ref3 = arg[0]) === "+") && arg.slice(1) in validQueryFlags) {
        queryFlags[arg.slice(1)] = true;
        continue;
      } else {
        results.push(arg);
      }
    }
    return results;
  })();
  return [commandArgs, queryFlags];
};

filterTabs = (function() {
  var integerRegex;
  integerRegex = /^\d+$/;
  return function(commandArgs, tabs) {
    var i, len, results, tab;
    results = [];
    for (i = 0, len = tabs.length; i < len; i++) {
      tab = tabs[i];
      if (!(function() {
        var arg, j, len1;
        for (j = 0, len1 = commandArgs.length; j < len1; j++) {
          arg = commandArgs[j];
          if (integerRegex.test(arg) && tab.id === parseInt(arg)) {
            continue;
          } else if (integerRegex.test(arg)) {
            return false;
          } else if (tab.url.indexOf(arg) === -1 && tab.title.indexOf(arg) === -1) {
            return false;
          }
        }
        return true;
      })()) {
        continue;
      }
      results.push(tab);
    }
    return results;
  };
})();

getMatchingTabs = function(commandArgs, callback) {
  var queryFlags, ref1;
  ref1 = getQueryFlags(commandArgs), commandArgs = ref1[0], queryFlags = ref1[1];
  return chromix("chrome.tabs.query", {}, queryFlags, function(tabs) {
    tabs = filterTabs(commandArgs, tabs);
    if (tabs.length === 0) {
      process.exit(1);
    }
    return callback(tabs);
  });
};

focusWindow = function(windowId) {
  return chromix("chrome.windows.update", {}, windowId, {
    focused: true
  }, function() {});
};

switch (commandName) {
  case "ls":
  case "list":
  case "tabs":
    getMatchingTabs(commandArgs, function(tabs) {
      var i, len, results, tab;
      results = [];
      for (i = 0, len = tabs.length; i < len; i++) {
        tab = tabs[i];
        results.push(console.log(tab.id + " " + tab.url + " " + tab.title));
      }
      return results;
    });
    break;
  case "tid":
    getMatchingTabs(commandArgs, function(tabs) {
      var i, len, results, tab;
      results = [];
      for (i = 0, len = tabs.length; i < len; i++) {
        tab = tabs[i];
        results.push(console.log("" + tab.id));
      }
      return results;
    });
    break;
  case "focus":
  case "activate":
    getMatchingTabs(commandArgs, function(tabs) {
      var i, len, results, tab;
      results = [];
      for (i = 0, len = tabs.length; i < len; i++) {
        tab = tabs[i];
        chromix("chrome.tabs.update", {}, tab.id, {
          selected: true
        });
        results.push(focusWindow(tab.windowId));
      }
      return results;
    });
    break;
  case "reload":
    getMatchingTabs(commandArgs, function(tabs) {
      var i, len, results, tab;
      results = [];
      for (i = 0, len = tabs.length; i < len; i++) {
        tab = tabs[i];
        results.push(chromix("chrome.tabs.reload", {}, tab.id, {}));
      }
      return results;
    });
    break;
  case "url":
    ref1 = commandArgs, url = ref1[0], commandArgs = 2 <= ref1.length ? slice.call(ref1, 1) : [];
    getMatchingTabs(commandArgs, function(tabs) {
      var i, len, results, tab;
      results = [];
      for (i = 0, len = tabs.length; i < len; i++) {
        tab = tabs[i];
        results.push(chromix("chrome.tabs.update", {}, tab.id, {
          url: url
        }));
      }
      return results;
    });
    break;
  case "rm":
  case "remove":
  case "close":
    getMatchingTabs(commandArgs, function(tabs) {
      var i, len, results, tab;
      results = [];
      for (i = 0, len = tabs.length; i < len; i++) {
        tab = tabs[i];
        results.push(chromix("chrome.tabs.remove", {}, tab.id));
      }
      return results;
    });
    break;
  case "open":
  case "create":
    fn = function(arg) {
      return chromix("chrome.tabs.create", {}, {
        url: arg
      }, function(tab) {
        focusWindow(tab.windowId);
        return console.log(tab.id + " " + tab.url);
      });
    };
    for (i = 0, len = commandArgs.length; i < len; i++) {
      arg = commandArgs[i];
      fn(arg);
    }
    break;
  case "ping":
    chromix("ping", {}, function(response) {
      if (response === "ok") {
        return process.exit(0);
      } else {
        return process.exit(1);
      }
    });
    break;
  case "file":
    fn1 = function(url) {
      return getMatchingTabs([], function(tabs) {
        var k, len2, results, t, tab;
        tabs = (function() {
          var k, len2, results;
          results = [];
          for (k = 0, len2 = tabs.length; k < len2; k++) {
            t = tabs[k];
            if (t.url.indexOf(url) === 0) {
              results.push(t);
            }
          }
          return results;
        })();
        if (tabs.length === 0) {
          return chromix("chrome.tabs.create", {}, {
            url: url
          }, function(tab) {
            focusWindow(tab.windowId);
            return console.log(tab.id + " " + tab.url);
          });
        } else {
          results = [];
          for (k = 0, len2 = tabs.length; k < len2; k++) {
            tab = tabs[k];
            results.push((function(tab) {
              return chromix("chrome.tabs.update", {}, tab.id, {
                selected: true
              }, function() {
                return chromix("chrome.tabs.reload", {}, tab.id, {}, function() {
                  return focusWindow(tab.windowId);
                });
              });
            })(tab));
          }
          return results;
        }
      });
    };
    for (j = 0, len1 = commandArgs.length; j < len1; j++) {
      arg = commandArgs[j];
      url = arg.indexOf("file://") === 0 ? arg : "file://" + (require("path").resolve(arg));
      fn1(url);
    }
    break;
  case "raw":
  case "josn":
    args = (function() {
      var k, len2, ref2, results;
      ref2 = commandArgs.slice(1);
      results = [];
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        arg = ref2[k];
        try {
          results.push(JSON.parse(arg));
        } catch (error) {
          results.push(arg);
        }
      }
      return results;
    })();
    chromix.apply(null, [commandArgs[0], {}].concat(slice.call(args), [function(response) {
      return console.log(JSON.stringify(response));
    }]));
    break;
  default:
    console.error("error: unknown command: " + commandName);
    process.exit(2);
}
